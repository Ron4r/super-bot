

import logging
import re
import os
import json
import random
import asyncio
from datetime import datetime, date
from pyrogram import Client as PyroClient, errors as PyroErrors
from pyrogram.enums import ChatMemberStatus
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardRemove, File as TGFile
)
from telegram.ext import (
    ApplicationBuilder, CallbackQueryHandler,
    CommandHandler, MessageHandler, ContextTypes, filters
)

# –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather
BOT_TOKEN = "7615626892:AAG0HtOU11GanFg48D2dyh5GNlebvjnRC20"

# –°–æ–∑–¥–∞—ë–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
for directory in ['accounts', 'sessions']:
    if not os.path.exists(directory):
        os.makedirs(directory)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª paid_users.json, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists('paid_users.json'):
    with open('paid_users.json', 'w') as f:
        json.dump([], f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID)
ADMINS = [1564745598]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
USER_STATES = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫
def generate_main_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –ü–∞—Ä—Å–µ—Ä", callback_data="parser")],
            [InlineKeyboardButton("üì© –ò–Ω–≤–∞–π—Ç–µ—Ä", callback_data="inviter")],
            [InlineKeyboardButton("üë• –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="accounts")],
            [InlineKeyboardButton("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscription")],
            [InlineKeyboardButton("üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
        ]
    )

def generate_next_button():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next")]
        ]
    )

def generate_digit_keyboard():
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("1", callback_data="1"),
                InlineKeyboardButton("2", callback_data="2"),
                InlineKeyboardButton("3", callback_data="3")
            ],
            [
                InlineKeyboardButton("4", callback_data="4"),
                InlineKeyboardButton("5", callback_data="5"),
                InlineKeyboardButton("6", callback_data="6")
            ],
            [
                InlineKeyboardButton("7", callback_data="7"),
                InlineKeyboardButton("8", callback_data="8"),
                InlineKeyboardButton("9", callback_data="9")
            ],
            [
                InlineKeyboardButton("0", callback_data="0"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete"),
                InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_code")
            ]
        ]
    )

def generate_back_button():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
    )

def generate_return_button():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

def generate_yes_no_keyboard():
    return InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("–î–∞", callback_data="yes"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
            ]
        ]
    )

def generate_admin_menu():
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_paid_user")],
            [InlineKeyboardButton("–£–±—Ä–∞—Ç—å –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_remove_paid_user")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_paid_users")],
            [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
    )

def extract_chat_identifier(link: str):
    if link.startswith("@"):
        return link[1:]

    if link.lstrip("-").isdigit():
        return int(link)

    patterns = [
        r'^https?://t\.me/(?P<username>[\w\d_]+)$',
        r'^https?://telegram\.me/(?P<username>[\w\d_]+)$',
        r'^https?://t\.me/joinchat/(?P<invite>\w+)$',
        r'^https?://telegram\.me/joinchat/(?P<invite>\w+)$'
    ]

    for pattern in patterns:
        match = re.match(pattern, link)
        if match:
            if 'username' in match.groupdict():
                return match.group('username')
            elif 'invite' in match.groupdict():
                return match.group('invite')

    return None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
TARGET_CHAT_IDS = set()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def load_paid_users():
    with open('paid_users.json', 'r') as f:
        return json.load(f)

def save_paid_users(paid_users):
    with open('paid_users.json', 'w') as f:
        json.dump(paid_users, f)

def is_paid_user(username):
    paid_users = load_paid_users()
    return username and username.lower() in (user.lower() for user in paid_users)

# –°—Ç–∞—Ä—Ç –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    context.user_data['session_created'] = False
    context.user_data['accounts'] = []
    context.user_data['current_account'] = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ –Ω–∏–∫–Ω–µ–π–º—É
    username = update.effective_user.username
    if is_paid_user(username):
        context.user_data['is_paid'] = True
    else:
        context.user_data['is_paid'] = False

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    accounts = os.listdir('accounts')
    user_accounts = []
    for acc_file in accounts:
        if acc_file.startswith(f'{user_id}_'):
            user_accounts.append(acc_file)

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not context.user_data['is_paid'] and len(user_accounts) >= 1:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∏ —É–∂–µ –∏–º–µ–µ—Ç 1 –∞–∫–∫–∞—É–Ω—Ç
        message = await update.message.reply_text(
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    if user_accounts:
        context.user_data['accounts'] = user_accounts
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π
        message = await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(acc.replace(f'{user_id}_', '').replace('.json', ''), callback_data=f"select_account_{acc}")]
                for acc in user_accounts
            ])
        )
        context.user_data['last_message_id'] = message.message_id
        return
    else:
        message = await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã \n \n –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –¥—Ä—É–≥—É—é ‚û°Ô∏èüë•\n\n ‚ö†Ô∏è –í–∞–∂–Ω–æ: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üöÄ",
            reply_markup=generate_next_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        message = await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=generate_main_menu()
        )
        context.user_data['last_message_id'] = message.message_id
    else:
        message = await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=generate_main_menu()
        )
        context.user_data['last_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
async def show_instructions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    instruction_text = (
        "–î–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è! üëã\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –¥—Ä—É–≥—É—é ‚û°Ô∏èüë•\n\n"
        "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∑–∞ —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ.\n\n"
        "üîπ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n"
        "–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 30 —á–µ–ª–æ–≤–µ–∫ –≤ –¥–µ–Ω—å üìä\n"
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã üë§üîí\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –∏–Ω–≤–∞–π—Ç–∞.\n\n"
        "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞\n –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ Telegram ‚Äî @Rostislavas üì©\n"
    )
    message = await query.edit_message_text(
        instruction_text,
        parse_mode='Markdown',
        reply_markup=generate_return_button()
    )
    context.user_data['last_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ü–∞—Ä—Å–µ—Ä"
async def select_parser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('session_created') or not context.user_data.get('current_account'):
        message = await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ê–∫–∫–∞—É–Ω—Ç—ã'.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    message = await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ @username –≥—Ä—É–ø–ø—ã, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[update.effective_user.id] = 'PARSE_GROUP'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞
async def parse_group_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'PARSE_GROUP':
        return

    link = update.message.text.strip()
    context.user_data['parse_group_link'] = link
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')

    message = await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=last_message_id,
        text="–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥..."
    )
    context.user_data['last_message_id'] = message.message_id

    if not context.user_data.get('current_account'):
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text="–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    account_data = context.user_data['current_account']

    try:
        app = PyroClient(
            account_data['session_name'],
            api_id=int(account_data['api_id']),
            api_hash=account_data['api_hash'],
            no_updates=True
        )

        await app.start()

        try:
            chat_identifier = extract_chat_identifier(link)
            if not chat_identifier:
                message = await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=last_message_id,
                    text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
                return

            chat = await app.get_chat(chat_identifier)

            members = []
            async for member in app.get_chat_members(chat.id):
                if member.user.is_bot or not member.user.username:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username
                link = f"https://t.me/{member.user.username}"
                members.append(link)

            if members:
                filename = f"userlinks_{update.effective_user.id}.txt"
                with open(filename, "w", encoding="utf-8") as file:
                    file.write("\n".join(members))

                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=open(filename, 'rb')
                )
                os.remove(filename)

                message = await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=last_message_id,
                    text="–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
            else:
                message = await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=last_message_id,
                    text="–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∏–∫–Ω–µ–π–º–æ–≤.",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id

        except PyroErrors.ChatAdminRequired:
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=last_message_id,
                text="–û—à–∏–±–∫–∞: –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
        except PyroErrors.ChatInvalid:
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=last_message_id,
                text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=last_message_id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
        finally:
            await app.stop()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ò–Ω–≤–∞–π—Ç–µ—Ä"
async def select_inviter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not context.user_data.get('session_created') or not context.user_data.get('current_account'):
        message = await query.edit_message_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ê–∫–∫–∞—É–Ω—Ç—ã'.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö
    username = update.effective_user.username
    context.user_data['is_paid'] = is_paid_user(username)
    if context.user_data['is_paid']:
        subscription_info = "–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        subscription_info = "–£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚ú®!\n –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å.\n\n–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏—Å—á–µ–∑–Ω–µ—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫–∫–∞—É–Ω—Ç—ã  üöÄüåê.\n\n –ü–∏—à–∏—Ç–µ –º–Ω–µ, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é  @Rostislavas üëç"

    message = await query.edit_message_text(
        f"{subscription_info}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏–ª–∏ @username –≥—Ä—É–ø–ø—ã, –≤ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[update.effective_user.id] = 'INVITE_GROUP'

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def get_invite_group_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'INVITE_GROUP':
        return

    group_link = update.message.text.strip()
    context.user_data['invite_group_link'] = group_link
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if not context.user_data.get('current_account'):
        message = await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    last_message_id = context.user_data.get('last_message_id')

    account_data = context.user_data['current_account']

    app = PyroClient(
        account_data['session_name'],
        api_id=int(account_data['api_id']),
        api_hash=account_data['api_hash'],
        no_updates=True
    )

    try:
        await app.start()

        chat_identifier = extract_chat_identifier(group_link)
        if not chat_identifier:
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=last_message_id,
                text="–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
            return

        chat = await app.get_chat(chat_identifier)

        member_status = await app.get_chat_member(chat.id, (await app.get_me()).id)
        logger.info(f"–°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {member_status.status}")
        logger.info(f"Can invite users: {getattr(member_status, 'can_invite_users', 'N/A')}")

        has_invite_rights = False

        if member_status.status == ChatMemberStatus.OWNER:
            has_invite_rights = True
        elif member_status.status == ChatMemberStatus.ADMINISTRATOR:
            has_invite_rights = getattr(member_status, 'can_invite_users', False)
        else:
            has_invite_rights = False

        if not has_invite_rights:
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=last_message_id,
                text="–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç—É –≥—Ä—É–ø–ø—É.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
            return

        context.user_data['invite_chat_link'] = group_link  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É
        context.user_data['invite_chat_id'] = chat.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —á–∞—Ç–∞
        TARGET_CHAT_IDS.add(chat.id)  # –î–æ–±–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç .txt):",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        USER_STATES[update.effective_user.id] = 'INVITE_FILE'

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã: {e}")
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
    finally:
        await app.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def receive_invite_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'INVITE_FILE':
        return

    document = None
    if update.message.document:
        document = update.message.document
        logger.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.")
    elif update.message.reply_to_message and update.message.reply_to_message.document:
        document = update.message.reply_to_message.document
        logger.info("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        logger.info("–§–∞–π–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–µ.")
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º."
        )
        return

    if not document:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.")
        return

    if document.mime_type != 'text/plain':
        logger.info(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {document.mime_type}")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt.")
        return

    file_name = f"invitelist_{update.effective_user.id}.txt"

    try:
        tg_file: TGFile = await document.get_file()
        logger.info(f"–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ tg_file: {type(tg_file)}")
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {tg_file.file_id}")
        await tg_file.download_to_drive(custom_path=file_name)
        logger.info(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {file_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    context.user_data['invite_file'] = file_name
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å
    message = await update.message.reply_text(
        "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É?",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    USER_STATES[update.effective_user.id] = 'INVITE_COUNT'

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
async def get_invite_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'INVITE_COUNT':
        return

    try:
        invite_count = int(update.message.text.strip())
        if invite_count <= 0:
            raise ValueError

        user_id = update.effective_user.id
        username = update.effective_user.username
        context.user_data['is_paid'] = is_paid_user(username)

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if not context.user_data['is_paid']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–µ–≥–æ–¥–Ω—è
            today = date.today()
            user_invites = context.bot_data.get('user_invites', {})
            invites_today = user_invites.get(user_id, {}).get('date') == today and user_invites.get(user_id, {}).get('count', 0) or 0
            total_invites = invites_today + invite_count
            if total_invites > 10:
                remaining = 10 - invites_today
                remaining = max(remaining, 0)
                try:
                    await update.message.delete()
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                message = await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data.get('last_message_id'),
                    text=f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë {remaining} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π \n @Rostislavas .",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
                USER_STATES.pop(update.effective_user.id, None)
                return

        context.user_data['invite_count'] = invite_count
        try:
            await update.message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    except ValueError:
        message = await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(invite_members_to_group(update, context))

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES.pop(update.effective_user.id, None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
async def invite_members_to_group(update: Update, context: ContextTypes.DEFAULT_TYPE, from_job=False):
    invite_file = context.user_data.get('invite_file')
    invite_chat_link = context.user_data.get('invite_group_link')
    invite_count = context.user_data.get('invite_count', 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30

    if not invite_file or not os.path.exists(invite_file):
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_message_id'),
            text="–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    if not invite_chat_link:
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_message_id'),
            text="–û—à–∏–±–∫–∞: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    user_id = update.effective_user.id
    username = update.effective_user.username
    user_invites = context.bot_data.get('user_invites', {})

    context.user_data['is_paid'] = is_paid_user(username)

    if not context.user_data['is_paid']:
        invites_today = user_invites.get(user_id, {}).get('date') == today and user_invites.get(user_id, {}).get('count', 0) or 0
        total_invites = invites_today + invite_count
        if total_invites > 10:
            remaining = 10 - invites_today
            remaining = max(remaining, 0)
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=context.user_data.get('last_message_id'),
                text=f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë {remaining} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n @Rostislavas ",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
            return

    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º usernames
    with open(invite_file, 'r', encoding='utf-8') as file:
        all_members = []
        for line in file:
            line = line.strip()
            if not line:
                continue
            if line.startswith('https://t.me/'):
                username = line.replace('https://t.me/', '').strip('/')
                username = username.lstrip('@')
                all_members.append(username)
            else:
                continue

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –µ—â—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invited_members = context.user_data.get('invited_members', [])
    remaining_members = [member for member in all_members if member not in invited_members]

    if not remaining_members:
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_message_id'),
            text="–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —É–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    members_to_invite = remaining_members[:invite_count]

    if not context.user_data.get('current_account'):
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_message_id'),
            text="–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        return

    account_data = context.user_data['current_account']

    app = PyroClient(
        account_data['session_name'],
        api_id=int(account_data['api_id']),
        api_hash=account_data['api_hash'],
        no_updates=True
    )

    try:
        await app.start()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Å—ã–ª–∫–∏
        chat_identifier = extract_chat_identifier(invite_chat_link)
        chat = await app.get_chat(chat_identifier)

        status_message_id = context.user_data.get('last_message_id')
        status_text = "–ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=status_message_id,
            text=status_text
        )
        context.user_data['last_message_id'] = message.message_id

        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        messages_to_delete = []

        for idx, username in enumerate(members_to_invite, start=1):
            try:
                username = username.lstrip('@')
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_entity = await app.get_users(username)
                await app.add_chat_members(chat.id, user_entity.id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                status_text += f"{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω\n"
                context.user_data.setdefault('invited_members', []).append(username)
                # –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                messages_to_delete.append(user_entity.id)

                # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                if not context.user_data['is_paid']:
                    if user_id not in user_invites:
                        user_invites[user_id] = {'date': today, 'count': 1}
                    else:
                        if user_invites[user_id]['date'] == today:
                            user_invites[user_id]['count'] += 1
                        else:
                            user_invites[user_id] = {'date': today, 'count': 1}
                    context.bot_data['user_invites'] = user_invites

            except PyroErrors.UsernameInvalid:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: –Ω–µ–≤–µ—Ä–Ω—ã–π username.")
                status_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: –Ω–µ–≤–µ—Ä–Ω—ã–π username.\n"
                continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            except PyroErrors.PeerIdInvalid:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
                status_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            except PyroErrors.UserPrivacyRestricted:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã.")
                status_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–≥—Ä–∞–Ω–∏—á–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—ã.\n"
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: {e}")
                status_text += f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {username}: {e}\n"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                message = await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=status_message_id,
                    text=status_text[-4096:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                )
                context.user_data['last_message_id'] = message.message_id
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏, –æ—Ç 60 –¥–æ 120 —Å–µ–∫—É–Ω–¥
            await asyncio.sleep(random.randint(60, 120))

        # –£–¥–∞–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
        await delete_system_messages(app, chat.id, messages_to_delete)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ
        try:
            message = await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=status_message_id,
                text=status_text[-4096:] + "\n–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ: {e}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
        if not from_job:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ context.job_queue –Ω–µ None
            if context.job_queue:
                context.job_queue.run_once(
                    ask_continue_inviting,
                    when=86400,  # 24 —á–∞—Å–∞
                    data={'chat_id': update.effective_chat.id, 'user_id': update.effective_user.id},
                    name=str(update.effective_chat.id)
                )
            else:
                logger.error("context.job_queue is None")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=context.user_data.get('last_message_id'),
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
    finally:
        await app.stop()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
async def delete_system_messages(app, chat_id, user_ids):
    async for message in app.get_chat_history(chat_id):
        if message.service and message.new_chat_members:
            new_member_ids = [user.id for user in message.new_chat_members]
            if any(uid in user_ids for uid in new_member_ids):
                try:
                    await app.delete_messages(chat_id, message.id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message.id}")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞
async def ask_continue_inviting(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    chat_id = job_data['chat_id']
    user_id = job_data['user_id']

    message = await context.bot.send_message(
        chat_id=chat_id,
        text="–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?",
        reply_markup=generate_yes_no_keyboard()
    )
    context.user_data['last_message_id'] = message.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[user_id] = 'WAITING_RESPONSE'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏
async def handle_continue_inviting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'WAITING_RESPONSE':
        return

    query = update.callback_query
    await query.answer()
    answer = query.data

    if answer == 'yes':
        message = await query.edit_message_text(
            "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞?",
            reply_markup=generate_yes_no_keyboard()
        )
        context.user_data['last_message_id'] = message.message_id

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        USER_STATES[update.effective_user.id] = 'CHOOSE_FILE'
    else:
        message = await query.edit_message_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
async def handle_choose_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'CHOOSE_FILE':
        return

    query = update.callback_query
    await query.answer()
    answer = query.data

    if answer == 'yes':
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º
        message = await query.edit_message_text(
            "–°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–∏—Ç—å –≤ —ç—Ç–æ—Ç —Ä–∞–∑?",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é INVITE_COUNT
        USER_STATES[update.effective_user.id] = 'INVITE_COUNT'
    else:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        message = await query.edit_message_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç .txt):",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é INVITE_FILE
        USER_STATES[update.effective_user.id] = 'INVITE_FILE'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await next_step(update, context)
    USER_STATES.pop(update.effective_user.id, None)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await next_step(update, context)
    USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ê–∫–∫–∞—É–Ω—Ç—ã"
async def view_accounts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    accounts = os.listdir('accounts')
    user_accounts = [acc for acc in accounts if acc.startswith(f'{user_id}_')]

    if user_accounts:
        buttons = [
            [InlineKeyboardButton(acc.replace(f'{user_id}_', '').replace('.json', ''), callback_data=f"select_account_{acc}")]
            for acc in user_accounts
        ]
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç" –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç
        username = update.effective_user.username
        context.user_data['is_paid'] = is_paid_user(username)
        if context.user_data['is_paid'] or len(user_accounts) < 1:
            buttons.append([InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="add_account")])
        buttons.append([InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")])
        message = await query.edit_message_text(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        context.user_data['last_message_id'] = message.message_id
    else:
        message = await query.edit_message_text(
            "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data="add_account")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data="back_to_menu")]
            ])
        )
        context.user_data['last_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç"
async def add_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    username = update.effective_user.username
    context.user_data['is_paid'] = is_paid_user(username)
    if not context.user_data['is_paid']:
        accounts = os.listdir('accounts')
        user_accounts = [acc for acc in accounts if acc.startswith(f'{user_id}_')]
        if len(user_accounts) >= 1:
            message = await query.edit_message_text(
                "–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n @Rostislavas",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id
            return

    message = await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API ID:",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES[update.effective_user.id] = 'API_ID'

# –ü–æ–ª—É—á–µ–Ω–∏–µ API ID
async def get_api_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'API_ID':
        return

    context.user_data['api_id'] = update.message.text.strip()
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')
    message = await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=last_message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API Hash:",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    USER_STATES[update.effective_user.id] = 'API_HASH'

# –ü–æ–ª—É—á–µ–Ω–∏–µ API Hash
async def get_api_hash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'API_HASH':
        return

    context.user_data['api_hash'] = update.message.text.strip()
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')
    message = await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=last_message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567):",
        reply_markup=generate_back_button()
    )
    context.user_data['last_message_id'] = message.message_id

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    USER_STATES[update.effective_user.id] = 'PHONE_NUMBER'

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Pyrogram
async def get_phone_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'PHONE_NUMBER':
        return

    context.user_data['phone_number'] = update.message.text.strip()
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')

    try:
        logger.info(
            f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API —Å –Ω–æ–º–µ—Ä–æ–º: {context.user_data['phone_number']}"
        )

        user_id = update.effective_user.id
        phone_number = context.user_data['phone_number']
        session_name = f'sessions/{user_id}_{phone_number}'

        context.user_data['app'] = PyroClient(
            session_name,
            api_id=int(context.user_data['api_id']),
            api_hash=context.user_data['api_hash']
        )

        await context.user_data['app'].connect()

        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–¥...")
        phone_code_hash = await context.user_data['app'].send_code(
            context.user_data['phone_number']
        )
        context.user_data['phone_code_hash'] = phone_code_hash.phone_code_hash

        logger.info(
            f"–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä: {context.user_data['phone_number']} –≤ Telegram!"
        )

        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–∫–æ–¥ –ø—Ä–∏–¥—ë—Ç –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram):",
            reply_markup=generate_digit_keyboard()
        )
        context.user_data['last_message_id'] = message.message_id
        context.user_data['code'] = ""

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        USER_STATES[update.effective_user.id] = 'CODE'

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def get_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'CODE':
        return

    query = update.callback_query
    await query.answer()
    data = query.data

    last_message_id = context.user_data.get('last_message_id')

    if data.isdigit():
        context.user_data['code'] += data
    elif data == "delete":
        context.user_data['code'] = context.user_data['code'][:-1]
    elif data == "submit_code":
        if context.user_data['code']:
            message = await query.edit_message_text("–ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            context.user_data['last_message_id'] = message.message_id
            try:
                await context.user_data['app'].sign_in(
                    phone_number=context.user_data['phone_number'],
                    phone_code=context.user_data['code'],
                    phone_code_hash=context.user_data['phone_code_hash']
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
                user_id = update.effective_user.id
                phone_number = context.user_data['phone_number']
                account_file = f'accounts/{user_id}_{phone_number}.json'
                user_data = {
                    'phone_number': phone_number,
                    'api_id': context.user_data['api_id'],
                    'api_hash': context.user_data['api_hash'],
                    'session_name': f'sessions/{user_id}_{phone_number}'
                }
                with open(account_file, 'w') as f:
                    json.dump(user_data, f)

                await context.user_data['app'].send_message(
                    "me", "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
                )
                await context.user_data['app'].disconnect()
                del context.user_data['app']  # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ user_data

                context.user_data['current_account'] = user_data
                context.user_data['session_created'] = True

                message = await query.edit_message_text(
                    "Telegram —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
                USER_STATES.pop(update.effective_user.id, None)
                return
            except PyroErrors.SessionPasswordNeeded:
                # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                message = await query.edit_message_text(
                    "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞—â–∏—â–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                    reply_markup=generate_back_button()
                )
                context.user_data['last_message_id'] = message.message_id

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
                USER_STATES[update.effective_user.id] = 'PASSWORD'
                return
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
                message = await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞: {e}",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
                USER_STATES.pop(update.effective_user.id, None)
                return
        else:
            message = await query.edit_message_text(
                "–í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
                reply_markup=generate_digit_keyboard()
            )
            context.user_data['last_message_id'] = message.message_id
            return
    else:
        pass  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º
    message = await query.edit_message_text(
        text=f"–¢–µ–∫—É—â–∏–π –∫–æ–¥: {context.user_data['code']}",
        reply_markup=generate_digit_keyboard()
    )
    context.user_data['last_message_id'] = message.message_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def get_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'PASSWORD':
        return

    password = update.message.text.strip()
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')

    try:
        await context.user_data['app'].check_password(password=password)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        user_id = update.effective_user.id
        phone_number = context.user_data['phone_number']
        account_file = f'accounts/{user_id}_{phone_number}.json'
        user_data = {
            'phone_number': phone_number,
            'api_id': context.user_data['api_id'],
            'api_hash': context.user_data['api_hash'],
            'session_name': f'sessions/{user_id}_{phone_number}'
        }
        with open(account_file, 'w') as f:
            json.dump(user_data, f)

        await context.user_data['app'].send_message(
            "me", "–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!"
        )
        await context.user_data['app'].disconnect()
        del context.user_data['app']  # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ user_data

        context.user_data['current_account'] = user_data
        context.user_data['session_created'] = True

        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text="Telegram —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        USER_STATES.pop(update.effective_user.id, None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –ø–∞—Ä–æ–ª—è: {e}")
        message = await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–û—à–∏–±–∫–∞: {e}",
            reply_markup=generate_return_button()
        )
        context.user_data['last_message_id'] = message.message_id
        USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
async def select_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    if data.startswith("select_account_"):
        account_file = data.replace("select_account_", "")
        account_path = os.path.join('accounts', account_file)
        if os.path.exists(account_path):
            # –û—Ç–∫–ª—é—á–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç Pyrogram, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if 'app' in context.user_data:
                try:
                    await context.user_data['app'].disconnect()
                except:
                    pass
                del context.user_data['app']

            with open(account_path, 'r') as f:
                account_data = json.load(f)
                context.user_data['current_account'] = account_data
                context.user_data['session_created'] = True
                context.user_data['invited_members'] = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö
                message = await query.edit_message_text(
                    f"–í—ã–±—Ä–∞–Ω –∞–∫–∫–∞—É–Ω—Ç {account_data['phone_number']}.",
                    reply_markup=generate_return_button()
                )
                context.user_data['last_message_id'] = message.message_id
        else:
            message = await query.edit_message_text(
                "–û—à–∏–±–∫–∞: –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=generate_return_button()
            )
            context.user_data['last_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"
async def view_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    username = update.effective_user.username
    if is_paid_user(username):
        subscription_info = "–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    else:
        subscription_info = "–£ –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚ú®!\n –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥–µ–Ω—å.\n\n–í –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏—Å—á–µ–∑–Ω–µ—Ç, –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–∫–∫–∞—É–Ω—Ç—ã  üöÄüåê.\n\n –ü–∏—à–∏—Ç–µ –º–Ω–µ, –µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é  @Rostislavasüëç \n"

    message = await query.edit_message_text(
        subscription_info,
        reply_markup=generate_return_button()
    )
    context.user_data['last_message_id'] = message.message_id

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –≤ —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–∞—Ö
async def delete_join_messages_in_target_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.message
    if message.chat.id in TARGET_CHAT_IDS and (message.new_chat_members or message.left_chat_member):
        try:
            await message.delete()
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}: {e}")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /admin
async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    message = await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=generate_admin_menu()
    )
    context.user_data['last_message_id'] = message.message_id

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'admin_add_paid_user':
        message = await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é:",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_STATES[update.effective_user.id] = 'ADMIN_ADD_PAID_USER'

    elif data == 'admin_remove_paid_user':
        message = await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏:",
            reply_markup=generate_back_button()
        )
        context.user_data['last_message_id'] = message.message_id

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        USER_STATES[update.effective_user.id] = 'ADMIN_REMOVE_PAID_USER'

    elif data == 'admin_list_paid_users':
        paid_users = load_paid_users()
        if paid_users:
            user_list = [f"@{user}" for user in paid_users]
            user_list_str = "\n".join(user_list)
            await query.edit_message_text(f"–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list_str}", reply_markup=generate_return_button())
        else:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.", reply_markup=generate_return_button())
    else:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=generate_return_button())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
async def admin_add_paid_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'ADMIN_ADD_PAID_USER':
        return

    username = update.message.text.strip().lstrip('@')
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')
    paid_users = load_paid_users()
    if username.lower() not in (user.lower() for user in paid_users):
        paid_users.append(username)
        save_paid_users(paid_users)
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é.",
            reply_markup=generate_return_button()
        )
    else:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∏–º–µ–µ—Ç –ø–ª–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é.",
            reply_markup=generate_return_button()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES.pop(update.effective_user.id, None)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
async def admin_remove_paid_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if USER_STATES.get(update.effective_user.id) != 'ADMIN_REMOVE_PAID_USER':
        return

    username = update.message.text.strip().lstrip('@')
    try:
        await update.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    last_message_id = context.user_data.get('last_message_id')
    paid_users = load_paid_users()
    if username.lower() in (user.lower() for user in paid_users):
        paid_users = [user for user in paid_users if user.lower() != username.lower()]
        save_paid_users(paid_users)
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏.",
            reply_markup=generate_return_button()
        )
    else:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=last_message_id,
            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –ø–ª–∞—Ç–Ω—ã—Ö.",
            reply_markup=generate_return_button()
        )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    USER_STATES.pop(update.effective_user.id, None)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = update.effective_user.id

    if data == 'next':
        await next_step(update, context)
    elif data == 'parser':
        await select_parser(update, context)
    elif data == 'inviter':
        await select_inviter(update, context)
    elif data == 'accounts':
        await view_accounts(update, context)
    elif data == 'subscription':
        await view_subscription(update, context)
    elif data == 'instructions':
        await show_instructions(update, context)
    elif data == 'back_to_menu':
        await back_to_menu(update, context)
    elif data == 'back':
        await go_back(update, context)
    elif data.startswith('select_account_'):
        await select_account(update, context)
    elif data == 'add_account':
        await add_account(update, context)
    elif data in ('yes', 'no'):
        if USER_STATES.get(user_id) == 'WAITING_RESPONSE':
            await handle_continue_inviting(update, context)
        elif USER_STATES.get(user_id) == 'CHOOSE_FILE':
            await handle_choose_file(update, context)
    elif data.isdigit() or data in ('delete', 'submit_code'):
        if USER_STATES.get(user_id) == 'CODE':
            await get_code(update, context)
    elif data.startswith('admin_'):
        if user_id in ADMINS:
            await admin_menu_handler(update, context)
    else:
        logger.info(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {data}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state = USER_STATES.get(update.effective_user.id)

    if user_state == 'PARSE_GROUP':
        await parse_group_members(update, context)
    elif user_state == 'INVITE_GROUP':
        await get_invite_group_link(update, context)
    elif user_state == 'INVITE_FILE':
        await receive_invite_file(update, context)
    elif user_state == 'INVITE_COUNT':
        await get_invite_count(update, context)
    elif user_state == 'API_ID':
        await get_api_id(update, context)
    elif user_state == 'API_HASH':
        await get_api_hash(update, context)
    elif user_state == 'PHONE_NUMBER':
        await get_phone_number(update, context)
    elif user_state == 'PASSWORD':
        await get_password(update, context)
    elif user_state == 'ADMIN_ADD_PAID_USER':
        await admin_add_paid_user(update, context)
    elif user_state == 'ADMIN_REMOVE_PAID_USER':
        await admin_remove_paid_user(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('admin', admin_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_message_handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏/–≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, delete_join_messages_in_target_chats))
    application.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, delete_join_messages_in_target_chats))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
